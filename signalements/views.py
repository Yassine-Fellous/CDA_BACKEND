# Copyright (c) 2025
# Yassine Fellous, Abdelkader Sofiane Ziri, Mathieu Duverne, Mohamed Marwane Bellagha
# Tous droits r√©serv√©s. Utilisation interdite sans autorisation √©crite des auteurs.

from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
from django.utils import timezone
from django.conf import settings
import jwt
import json

from .models import Signalement
from authentication.models import UserAuth
from installations.models import Installation

def get_user_from_jwt(request):
    auth = request.META.get('HTTP_AUTHORIZATION', '')
    if not auth.startswith('Bearer '):
        return None
    token = auth.split(' ')[1]
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        email = payload.get('email')
        return UserAuth.objects.get(email=email)
    except Exception:
        return None

@csrf_exempt
def create_signalement(request):
    print(f"üîç DEBUG - Requ√™te re√ßue: {request.method}")
    
    if request.method != "POST":
        return JsonResponse({"error": "M√©thode non autoris√©e"}, status=405)

    user = get_user_from_jwt(request)
    print(f"üîç DEBUG - Utilisateur: {user}")
    
    if not user:
        return JsonResponse({"error": "Authentification requise"}, status=401)

    try:
        data = json.loads(request.body)
        print(f"üîç DEBUG - Donn√©es re√ßues: {data}")
        
        installation_id = data.get("installation_id")
        message = data.get("message")
        images_url = data.get("images_url")
        type_ = data.get("type", "Autre")

        print(f"üîç DEBUG - installation_id: {installation_id} (type: {type(installation_id)})")
        print(f"üîç DEBUG - message: {message}")
        print(f"üîç DEBUG - type: {type_}")

        if not installation_id or not message:
            return JsonResponse({"error": "installation_id et message requis"}, status=400)

        # ‚ú® LOGIQUE DE CORRESPONDANCE INTELLIGENTE
        try:
            print(f"üîç DEBUG - Recherche installation avec: {installation_id}")
            
            # Si c'est un nombre, chercher par ID auto-incr√©ment√©
            if str(installation_id).isdigit():
                print(f"üîç DEBUG - Recherche par ID num√©rique: {installation_id}")
                installation = Installation.objects.get(id=int(installation_id))
            else:
                print(f"üîç DEBUG - Recherche par inst_numero: {installation_id}")
                installation = Installation.objects.get(inst_numero=installation_id)
                
            print(f"‚úÖ DEBUG - Installation trouv√©e: {installation.id} - {installation.inst_nom}")
                
        except Installation.DoesNotExist:
            print(f"‚ùå DEBUG - Installation non trouv√©e: {installation_id}")
            return JsonResponse({"error": "Installation introuvable"}, status=404)

        print(f"üîç DEBUG - Cr√©ation du signalement...")
        signalement = Signalement.objects.create(
            message=message,
            images_url=images_url,
            type=type_,
            utilisateur=user,
            installation=installation,
            date=timezone.now()
        )
        
        print(f"‚úÖ DEBUG - Signalement cr√©√©: {signalement.id}")
        
        return JsonResponse({
            "message": "Signalement cr√©√©", 
            "id": signalement.id,
            "installation": {
                "id": installation.id,
                "inst_numero": installation.inst_numero,
                "nom": installation.inst_nom
            }
        })
        
    except Exception as e:
        print(f"‚ùå DEBUG - Erreur: {str(e)}")
        print(f"‚ùå DEBUG - Type d'erreur: {type(e)}")
        import traceback
        print(f"‚ùå DEBUG - Traceback: {traceback.format_exc()}")
        return JsonResponse({"error": str(e)}, status=500)
