build:
  context: .
  dockerfile: Dockerfile

deploy:
  startCommand: >
    sh -c "
      echo 'üöÄ D√©marrage d√©ploiement Railway...' &&
      echo 'üîß Fix collation PostgreSQL...' &&
      python -c \"
import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()
from django.db import connection
try:
    with connection.cursor() as cursor:
        cursor.execute('ALTER DATABASE railway REFRESH COLLATION VERSION;')
    print('‚úÖ Collation PostgreSQL mise √† jour')
except Exception as e:
    print(f'‚ö†Ô∏è Collation skip: {e}')
      \" &&
      echo 'üìã Gestion intelligente des migrations...' &&
      python -c \"
import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()
from django.core.management import execute_from_command_line
from django.db import connection

# V√©rifier les tables existantes
with connection.cursor() as cursor:
    cursor.execute(\\\"
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema='public' AND table_name LIKE '%auth%' OR table_name LIKE '%signalement%'
    \\\")
    existing_tables = [row[0] for row in cursor.fetchall()]
    
print(f'üìä Tables existantes: {existing_tables}')

# Strat√©gie adaptative
if 'authentication_userauth' in existing_tables:
    print('üìã Tables d√©tect√©es - Application avec --fake')
    try:
        # Marquer les migrations comme appliqu√©es sans les ex√©cuter
        execute_from_command_line(['manage.py', 'migrate', 'authentication', '--fake'])
        execute_from_command_line(['manage.py', 'migrate', 'signalements', '--fake'])
        execute_from_command_line(['manage.py', 'migrate', 'installations', '--fake'])
        print('‚úÖ Migrations marqu√©es comme appliqu√©es')
    except Exception as e:
        print(f'‚ö†Ô∏è Fake migrations: {e}')
        # Fallback: migration normale
        execute_from_command_line(['manage.py', 'migrate', '--noinput'])
else:
    print('üÜï Nouvelle base - Migrations normales')
    execute_from_command_line(['manage.py', 'makemigrations', '--noinput'])
    execute_from_command_line(['manage.py', 'migrate', '--noinput'])
      \" &&
      echo 'üë§ Configuration admin automatique...' &&
      python -c \"
import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()
from authentication.models import UserAuth
from django.contrib.auth.hashers import make_password

admin_email = 'admin@sportmap.com'
admin_password = 'AdminSportMap2025!'

try:
    # V√©rifier si admin existe
    if UserAuth.objects.filter(email=admin_email).exists():
        admin = UserAuth.objects.get(email=admin_email)
        # S'assurer qu'il a les droits admin
        if not hasattr(admin, 'is_admin') or not admin.is_admin:
            # Ajouter le champ is_admin s'il n'existe pas
            try:
                admin.is_admin = True
                admin.save()
                print(f'‚úÖ Admin {admin_email} mis √† jour avec droits')
            except Exception as e:
                print(f'‚ö†Ô∏è Mise √† jour admin: {e}')
        else:
            print(f'‚úÖ Admin {admin_email} d√©j√† configur√©')
    else:
        # Cr√©er nouvel admin
        admin = UserAuth.objects.create(
            email=admin_email,
            password=make_password(admin_password),
            is_verified=True,
            is_admin=True
        )
        print(f'‚úÖ Nouvel admin cr√©√©: {admin_email}')
        print(f'üîë Mot de passe: {admin_password}')
        
    # Test de connexion admin
    from django.contrib.auth.hashers import check_password
    if check_password(admin_password, admin.password):
        print('‚úÖ Authentification admin test√©e avec succ√®s')
    else:
        print('‚ö†Ô∏è Probl√®me authentification admin')
        
except Exception as e:
    print(f'‚ùå Erreur configuration admin: {e}')
    import traceback
    traceback.print_exc()
      \" &&
      echo 'üìä Import des donn√©es sportives...' &&
      python -c \"
import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()
from installations.models import Installation

# V√©rifier si donn√©es d√©j√† import√©es
count = Installation.objects.count()
if count > 5000:
    print(f'‚úÖ Donn√©es d√©j√† pr√©sentes: {count} installations')
else:
    print(f'üì• Import n√©cessaire (actuel: {count})')
    try:
        from django.core.management import execute_from_command_line
        execute_from_command_line(['manage.py', 'load_csv', 'data/filtered-data-es.csv', '--force'])
        new_count = Installation.objects.count()
        print(f'‚úÖ Import termin√©: {new_count} installations')
    except Exception as e:
        print(f'‚ö†Ô∏è Import √©chou√©: {e}')
      \" &&
      echo 'üè• Test de sant√© de l\\'API...' &&
      python -c \"
import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

# Tests de base
from authentication.models import UserAuth
from installations.models import Installation
from signalements.models import Signalement

print(f'üìä Statistiques finales:')
print(f'   - Utilisateurs: {UserAuth.objects.count()}')
print(f'   - Installations: {Installation.objects.count()}')
print(f'   - Signalements: {Signalement.objects.count()}')
print(f'   - Admins: {UserAuth.objects.filter(is_admin=True).count()}')

# Test JWT
import jwt
from django.conf import settings
test_payload = {'user_id': 1, 'email': 'test@test.com'}
token = jwt.encode(test_payload, settings.SECRET_KEY, algorithm='HS256')
print(f'‚úÖ JWT fonctionnel: {len(token)} caract√®res')
      \" &&
      echo 'üöÄ D√©marrage du serveur Django...' &&
      gunicorn config.wsgi:application --bind 0.0.0.0:\$PORT --workers 2 --timeout 120 --access-logfile - --error-logfile -
    "
  healthcheckPath: /health/
  healthcheckTimeout: 60
  restartPolicyType: always
